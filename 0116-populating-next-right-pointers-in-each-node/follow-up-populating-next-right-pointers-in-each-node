"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':
        """follow up apporach -> using dfs approach. make root.left.next = root.right and root.right.next = root.next.left .. use discription for exact logic.
         """
        # t.c O(N) s.c O(1) excluding recursion staack.
        def solver(root):
            if root == None:
                return None
            if root.left  == None and root.right  == None:
                return root
                
            root.left.next = root.right
            if root.next != None:
                root.right.next = root.next.left
            solver(root.left)
            solver(root.right)
        
        solver(root)
        return root
